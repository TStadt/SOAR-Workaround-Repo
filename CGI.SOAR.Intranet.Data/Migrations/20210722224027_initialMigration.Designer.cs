// <auto-generated />
using System;
using CGI.SOAR.Intranet.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CGI.SOAR.Intranet.Data.Migrations
{
    [DbContext(typeof(IntranetContext))]
    [Migration("20210722224027_initialMigration")]
    partial class initialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CGI.SOAR.Intranet.Core.Announcements.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHighPriority")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Announcements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = @"##About
This is a markdown file. for more information about markdown please go to [this site](https://www.markdownguide.org/cheat-sheet)
",
                            EndDate = new DateTime(2021, 8, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsHighPriority = true,
                            StartDate = new DateTime(2021, 7, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Welcome to the Angular portion of the Grad Academy Project"
                        },
                        new
                        {
                            Id = 2,
                            Body = @"##Members
* Anna Buchy
* Anthony Huck
* Brynna Johnson
* Josh Seltzer
* Keegan Moore
* Nishil Shah
* Randy Skripac
",
                            EndDate = new DateTime(2021, 8, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsHighPriority = false,
                            StartDate = new DateTime(2021, 7, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Grad Academy Information"
                        },
                        new
                        {
                            Id = 3,
                            Body = @"##Project Breakdown
* Front end: [Angular](https://angular.io/)
* API: [ASP.NET Core 3.1 Web API](https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-3.1)
* Database: [LocalDB](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/sql-server-express-localdb?view=sqlallproducts-allversions)
",
                            EndDate = new DateTime(2021, 8, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsHighPriority = true,
                            StartDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Welcome to the Grad Academy Presentation!"
                        });
                });

            modelBuilder.Entity("CGI.SOAR.Intranet.Core.Authentication.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alice.jones.admin@cgi.com",
                            FirstName = "Alice",
                            LastName = "Jones"
                        },
                        new
                        {
                            Id = 2,
                            Email = "john.smith.employee@cgi.com",
                            FirstName = "John",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = 3,
                            Email = "pamela.rogers.pm@cgi.com",
                            FirstName = "Pamela",
                            LastName = "Rogers"
                        },
                        new
                        {
                            Id = 4,
                            Email = "carter.cruz.hr@cgi.com",
                            FirstName = "Carter",
                            LastName = "Cruz"
                        });
                });

            modelBuilder.Entity("CGI.SOAR.Intranet.Core.TimesSheets.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsNoteRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsNoteRequired = false,
                            Name = "Deployment"
                        },
                        new
                        {
                            Id = 2,
                            IsNoteRequired = false,
                            Name = "Design"
                        },
                        new
                        {
                            Id = 3,
                            IsNoteRequired = false,
                            Name = "Develop"
                        },
                        new
                        {
                            Id = 4,
                            IsNoteRequired = false,
                            Name = "Marketing"
                        },
                        new
                        {
                            Id = 5,
                            IsNoteRequired = false,
                            Name = "Meeting"
                        },
                        new
                        {
                            Id = 6,
                            IsNoteRequired = true,
                            Name = "Other"
                        },
                        new
                        {
                            Id = 7,
                            IsNoteRequired = false,
                            Name = "Out of Office"
                        },
                        new
                        {
                            Id = 8,
                            IsNoteRequired = false,
                            Name = "Project Management"
                        },
                        new
                        {
                            Id = 9,
                            IsNoteRequired = false,
                            Name = "Release Management"
                        },
                        new
                        {
                            Id = 10,
                            IsNoteRequired = false,
                            Name = "Requirements"
                        },
                        new
                        {
                            Id = 11,
                            IsNoteRequired = false,
                            Name = "Testing"
                        });
                });

            modelBuilder.Entity("CGI.SOAR.Intranet.Data.TimeSheets.TimeEntryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignedEmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("AssignedTaskId")
                        .HasColumnType("int");

                    b.Property<double>("Friday")
                        .HasColumnType("float");

                    b.Property<double>("Monday")
                        .HasColumnType("float");

                    b.Property<DateTime>("MondayOfWeek")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<double>("Saturday")
                        .HasColumnType("float");

                    b.Property<double>("Sunday")
                        .HasColumnType("float");

                    b.Property<double>("Thursday")
                        .HasColumnType("float");

                    b.Property<double>("Tuesday")
                        .HasColumnType("float");

                    b.Property<double>("Wednesday")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AssignedEmployeeId");

                    b.HasIndex("AssignedTaskId");

                    b.ToTable("TimeEntries");
                });

            modelBuilder.Entity("CGI.SOAR.Intranet.Data.TimeSheets.TimeEntryEntity", b =>
                {
                    b.HasOne("CGI.SOAR.Intranet.Core.Authentication.Employee", "AssignedEmployee")
                        .WithMany()
                        .HasForeignKey("AssignedEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CGI.SOAR.Intranet.Core.TimesSheets.Task", "AssignedTask")
                        .WithMany()
                        .HasForeignKey("AssignedTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
